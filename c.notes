// This is the C notes

Preprocessor directives - Wherever it finds those things, the preprocessor simply replaces them then it goes to compilers, generated an expanded source code.
1. #include - include header files
2. #define - define variables or functions
3. #undef - un define
4. #ifdef - if defined
5. #ifndef - if not defined
6. #if, #else, #elif, #endif
7. #error
8. #pragma
9. #line fake_line fake_file_name- to report fake line with fake file name
10. #define toString(x) #x -to stringify x
11. ##
12. # - null directive, simply tells to do nothing


Basics of C
1. The format string can be %d (integer), %c (character), %s (string), %f (float) etc.
2. & - it gives the memory address of a variable
3. scanf("%d", #int_pointer) expects a pointer to int (int*), not an int - that can be address of an int
4. local variable - variable that is defined in a function or block
5. global variable - declared outside the function or block
6. static variable - declared with the static keyword, it retaains it value across multiple function calls, automtically initiallied
7. auto variables - all variable except static are auto variables. Explicitly  they can be declared with auto keyword. Doesn't retains its value
8. extern variable - declared using this command and then it can be initiallied once in any files.

gcc flags
1. gcc -E => stops just after preprocessing and returns a file with .i extension
2. 



Structure data type: used with struct keyword
1. Derived data types that allows grouping of many data types
2. structure's members are accessed are using dot(.) operator

union
1. union enables us to store various data types in the same memory address. In contrast to structures, where each member has a separate memory space,
2. useful if we need to represent many data types interchangeably
3. It stores data for only one member at a time.
4. Memory allocation happens according to the largest of the member

Four charactersitics of keyword in C
1. Reserved => cannot be used as identifiers in programs else raises compilation error
2. predefined => Each keyword has a specific meaning that is assigned by the C language. These meanings are built into the C language's grammar and syntax and the compiler interprets them accordingly
3. specific use => control structures, data types, flow control, and other language constructs else raises compilation error
4. Standarized => standard across different compilers

Keywords:
auto
char
const
double
int
long
register: storge class specifier, suggests the compiler to store the variable in CPU register not a command. Cann't access the address of this variable through & operator.
extern: declares a variable expecting to initiallise it in another file.
float
short
signed
static
unsigned
void
volatile
break: Exit loop or switch statements
switch
case
default
continue
do
else
enum
for
goto: jumps to labeled statement line
if
return
sizeof
struct
switch
typedef
union
while

Operators in C:
1. Arithmetic opertaors: +, -, *, /, %, ++, --; ++a: Prefix increment; a++: Postfix increment; The same logic applies for every ops
2. Relational operators: ==, !=, <=, >=, >, <
3. Logical Operators: &&, ||, !
4. Bitwsie operators: &, |, ~, ^, << {left shift}, >> {right shift}
5. Miscellaneous: sizeof {gets the total bytes blocked for the variable}; ?: {ternary ops}; , (comma operator) {int a = (1 + 2, 3 + 4); a will be 7 not 3}; . (dot) {access struct members for direct objects};
                -> (arrow) {access struct members for pointers}; & (addressof) {get the memory address of any identifier}; * (dereference) {access the value stored at the pointer}
Note: object.members and pointer->member {way to use access operators}
                
Associativity: When the precedence of ops clashes, then associativity (right-to-left or left-to-right) decides the order of processing opeators
+ - ! ~ ++ - - (type)* & sizeof, ?:, = += -= *= /= %=>>= <<= &= ^= |= {Have right-to-left associativity (with precedence separated in comma)}

Escape Characters
1. \a: Alarm or Beep
2. \b: Backspace
3. \f: Form Feed
4. \n: New Line
5. \r: Carriage Return
6. \t: Tab (Horizontal)
7. \v: Vertical Tab
8. \\: Backslash
9. \': Single Quote
10. \": Double Quote
11. \?: Question Mark
12. \nnn: octal number
13. \xhh: hexadecimal number
14. \0: Null

Constans in C
1. Integer: May add suffix as 'U' or 'u' for unsigned, 'L' or 'l' for long, 'LL' or 'll' for long long
2. Floating points: May use decimal notation or exponential notation ( using 'e' or 'E' prefix). May add suffix 'f' or 'F' for float, 'l' or 'L' for long double.
3. Octals: They are prefixed with 0 so that we can differentiate them from other numbers
4. hexadecimal => We prefix 0x or 0X
printf("%f\n", a);       // prints float (promoted to double)
printf("%lf\n", b);      // prints double
printf("%Lf\n", c);      // prints long double
The format specifier for size_t (the return type of sizeof) is zu.

Static
1. Static variable will persist its value across multiple function calls but scope will remain same as the automatic variables
2. Static global variable / functions can't be accessed from other files where non-static global variables / functions can be.

Types of errors in c:
Compile time errors
    1. Syntax errors
    2. Semantic error: When compiler couldn't understand the code written.
Run-time errors
    3. Run-time error
    4. Linker error: happens at execution time when the definition of a function is not found on the expected objecct file (.o files generated after compilation)
    5. Logical error

Compilation Process
1. Analysis phase: front end phase in which a source code is divided into fundamental parts to check grammar, syntax, and semantic of code; after that, the intermediate code is generated.
    It contains 3 analyzers as lexical analyzer, syntax analyzer and semantic analyzer.
2. Synthesis phase: back end phase in which intermediate code is optimised and generated into machine code.

Interpretor processing: Takes one line and converts it into machine code one by one.

Header files
1. stdio.h => This is a standard input/output header file. It contains all the library functions regarding standard input/output.
2. conio.h => This is a console input/output header file.
3. string.h => It contains all string related library functions like gets(), puts(),etc.
4. stdlib.h => This header file contains all the general library functions like malloc(), calloc(), exit(), etc.
5. math.h => This header file contains all the math operations related functions like sqrt(), pow(), etc.
6. time.h => This header file contains all the time-related functions.
7. ctype.h => This header file contains all character handling functions.
8. stdarg.h => Variable argument functions are defined in this header file.
9. signal.h => All the signal handling functions are defined in this header file.
10. setjmp.h => This file contains all the jump functions.
11. locale.h => This file contains locale functions.
12. errno.h => This file contains error handling functions.
13. assert.h => This file contains diagnostics functions.

Function calls
1. Call by values: When function is intended to only use the argument value (showing isde effect) then we call by value. It copies the value of arguments into parameters and hence function accesses the copies of the actual arguments passed.
2. Call by reference: When function intends to modify the argument value then we call by reference so that the function can access & modify the actual value.
    The parameters for call by reference function are pointer type.

malloc: function for memory allocation with garbage initiallied, return NULL if failed. It assigns contiguous block of memory
calloc: function for memory allocation with initiallied 0 value, return NULL if failed. It assigns contiguous multiple blocks of memory
realloc: function to adjust the memory allocation.

sizeof(variable): This calculates the total 

Pointer: a pointer is a variable that is used to store the address of another variable (of type int, char, float, array, function or any other pointer)
Pointer Arithmetic
1. increment: it doesn't need assignment after incrementing, it will automtically start pointing to next memory block depending on the data type it is pointing
2. Decrement: same for decrementing
3. Addition: When we do assignment, it's called as addition like p = p + 1
4. Subtraction: We can also do Subtraction of two pointers that will result into the (diff of address)/(data type size)
5. Comparison: 

Dangling pointer:
1. When the object being pointed through pointer is free()'d
2. When the object being pointed through pointer falls out of current scope
Note: To avoid dangling pointer issue, we should always initiallise the pointers with NULL value.

Constant Pointers
1. int * const ptr
2. The address which it is pointing cannot be changed

Pointer to Constant
1. const int * ptr
2. The address which it points can be changed
3. The value of the variable it is pointing cannot be changed using this pointer

void pointer cannot be dereferenced directly, it need to be changed into other pointers

Example of NULL pointers:
1. int *ptr=(int *)0;  
2. float *ptr=(float *)0;  
3. char *ptr=(char *)0;  
4. double *ptr=(double *)0;  
5. char *ptr='\0';  
6. int *ptr=NULL;  


Operator Precedence in C:

| Precedence Level  | Operators                        | Description                                     | Associativity     |
|-------------------|----------------------------------|-------------------------------------------------|-------------------|
| 1 (Highest)       | `()` `[]` `->` `.`               | Function call, array subscript, structure access| Left-to-right     |
| 2                 | `++` `--` (postfix)              | Post-increment, post-decrement                  |                   |
|                   | `++` `--` (prefix)               | Pre-increment, pre-decrement                    | Right-to-left     |
|                   | `+` `-` (unary)                  | Unary plus, unary minus                         |                   |
|                   | `!` `~`                          | Logical NOT, bitwise NOT                        |                   |
|                   | `*`                              | Dereference (indirection)                       |                   |
|                   | `&`                              | Address-of                                      |                   |
|                   | `sizeof`                         | Size of a data type or variable                 |                   |
|                   | `(type)`                         | Type casting                                    |                   |
| 3                 | `*` `/` `%`                      | Multiplication, division, modulo                | Left-to-right     |
| 4                 | `+` `-`                          | Addition, subtraction                           | Left-to-right     |
| 5                 | `<<` `>>`                        | Bitwise left shift, right shift                 | Left-to-right     |
| 6                 | `<` `<=` `>` `>=`                | Relational operators                            | Left-to-right     |
| 7                 | `==` `!=`                        | Equality and inequality                         | Left-to-right     |
| 8                 | `&`                              | Bitwise AND                                     | Left-to-right     |
| 9                 | `^`                              | Bitwise XOR                                     | Left-to-right     |
| 10                | `|`                              | Bitwise OR                                      | Left-to-right     |
| 11                | `&&`                             | Logical AND                                     | Left-to-right     |
| 12                | `||`                             | Logical OR                                      | Left-to-right     |
| 13                | `?:`                             | Ternary conditional operator                    | Right-to-left     |
| 14                | `=` `+=` `-=` `*=` `/=` `%=`     | Assignment operators                            | Right-to-left     |
|                   | `<<=` `>>=` `&=` `^=` `|=`       |                                                 |                   |
| 15 (Lowest)       | `,`                              | Comma (sequence operator)                       | Left-to-right     |

Associativity:
- **Left-to-right**: Operators at the same precedence level are evaluated from left to right.
- **Right-to-left**: Operators at the same precedence level are evaluated from right to left.

String functions (from <String.h>)
1. strlen: length of a string
2. puts and fputs
3. gets and fgets
4. strcat: strcat(str1, str2) => str1 is modified to str1 + str2
5. strcmp: Comparison of 2 string literals
6. strrev: reversing a string
7. strlwr: to lower case
8. strupr: to upper case
9. strstr: to find the first occurence of a substring in a string

| Declaration Type     | Can Reassign? | Modifiable?                           |
| -------------------- | ------------- | ------------------------------------  |
| `char str[] = "Hi";` | ❌ No          | ✅ Yes (individual characters)        |
| `char *str = "Hi";`  | ✅ Yes         | ❌ No (string literals are read-only) |

typedef: It's way to rename some type
Ex: typedef unsigned int u
    Now u will refer to as `unsigned int` type.

math functions (from <Math.h>)
1. ceil
2. floor
3. sqrt
4. pow
5. abs
6. sin
7. cos
8. tan
9. exp
10. log
11. log10
12. round
13. fabs: works for any number
14. fmod: returns remainder
15. sinh
16. cosh
17. 

Structure padding: An optimisation technique used by compilers to pad the bytes so that CPU read cycle could be reduced.
    This is a defult nature of compilers
    TO avoid that, we need to use `#pragma pack(1)` directive 
    Or we use `__attribute__((packed))` just after defining the struct

Tokens in c: The basic elements recognised by compiler si called as token. To count number of tokens, just keep separating them from left to right.
1. identifiers
2. Keywords
3. Constans
4. Operators
5. String literals
6. Separators